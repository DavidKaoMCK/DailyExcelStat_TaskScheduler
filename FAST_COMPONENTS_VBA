Private Sub Workbook_Open()
    ' Check if 'Inhand Index' is present in cell AD6 of the 'Component Parts Summary' sheet
    If Worksheets("Component Parts Summary").Range("AD6").Value <> "Inhand Index" Then
        ' Call the MainProgram sub-macro
        MainProgram
    End If
End Sub


Sub MainProgram()
    ' Step 1: Call the UpdateAndCalculateWorkbook subroutine to run file and duplicate it
    UpdateAndCalculateWorkbook
    
    ' Step 2: Call the savetovalues subroutine
    savetovalues

    ' Step 3: Call the UpdateSummary subroutine
    UpdateSummary

    ' Step 4: Call the closefile subroutine
    closefile
End Sub

Sub UpdateAndCalculateWorkbook()
    Dim SourceFilePath As String
    Dim DestinationFilePath As String
    Dim NewFileName As String
    Dim ws As Worksheet
    Dim OrderReport As Workbook
    
    ' Set the source file path (path to ORDER REPORT FY2016)
    SourceFilePath = "G:\Sales\Monthly$\ORDER REPORT FY2016.xlsx"
    
    ' Try to open the file in read-only mode
    On Error Resume Next
    Set OrderReport = Workbooks.Open(SourceFilePath, ReadOnly:=True)
    On Error GoTo 0
    
    ' Check if the file was successfully opened
    If Not OrderReport Is Nothing Then
        ' Calculate sheets in Fast Component.xlsm
        For Each ws In ThisWorkbook.Sheets
            ws.Calculate ' Update/calculate stuffs
        Next ws
        
        ' Disable automatic calculation
        Application.Calculation = xlCalculationManual
        
        ' Save as a new file with the latest date
        NewFileName = "Fast Component_" & Format(Date, "yyyy-mm-dd") & ".xlsm"
        DestinationFilePath = "G:\Purchasing\David-Analysis\00_FAST POFS\" & NewFileName
        ThisWorkbook.SaveAs DestinationFilePath, FileFormat:=52 ' 52 represents xlOpenXMLWorkbookMacroEnabled file format

        ' Close the read-only ORDER REPORT FY2016
        OrderReport.Close SaveChanges:=False
    Else
        MsgBox "Unable to open the ORDER REPORT FY2016 file. Please ensure the file path is correct and try again.", vbExclamation
    End If
End Sub

Sub savetovalues()
    'Updateby Extendoffice
    Dim wsh As Worksheet
    For Each wsh In ThisWorkbook.Worksheets
        wsh.Cells.Copy
        wsh.Cells.PasteSpecial xlPasteValues
    Next
    Application.CutCopyMode = False
End Sub

Sub UpdateSummary()
    Dim ws As Worksheet
    Dim summarySheet As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim j As Long
    Dim partName As String
    Dim openSales As Double
    Dim openPurchase As Double
    Dim Coming23Q4 As Double
    Dim Coming24Q1 As Double
    Dim Coming24Q2 As Double
    Dim Coming24Q3 As Double
    Dim Coming24Q4 As Double
    Dim Coming25after As Double
    Dim partData As Collection
    
    ' Set the summary sheet
    Set summarySheet = ThisWorkbook.Sheets("Component Parts Summary")
    
    ' Insert new column if not exists
    If summarySheet.Cells(1, "A").Value <> "SS index" Then
        summarySheet.Columns("A").Insert
        summarySheet.Cells(1, "A").Value = "SS index"
    End If
    
    ' Set column headers
    summarySheet.Cells(6, "U").Value = "CURRENT FREE STOCK"
    summarySheet.Cells(6, "V").Value = "OPEN SALES"
    summarySheet.Cells(6, "W").Value = "OPEN PURCHASE"
    summarySheet.Cells(6, "X").Value = "Coming23Q4"
    summarySheet.Cells(6, "Y").Value = "Coming24Q1"
    summarySheet.Cells(6, "Z").Value = "Coming24Q2"
    summarySheet.Cells(6, "AA").Value = "Coming24Q3"
    summarySheet.Cells(6, "AB").Value = "Coming24Q4"
    summarySheet.Cells(6, "AC").Value = "Coming25after"
    summarySheet.Cells(6, "AD").Value = "Inhand Index" ' Inhand Index
    
    ' Hide columns
    summarySheet.Columns("F:Q").EntireColumn.Hidden = True
    summarySheet.Columns("S:T").EntireColumn.Hidden = True
    
    ' Create a collection to store part data
    Set partData = New Collection
    
    ' Loop through each part in the summary sheet and collect data
    For i = 9 To 290
        partName = summarySheet.Cells(i, "B").Value
        openSales = 0
        openPurchase = 0
        Coming23Q4 = 0
        Coming24Q1 = 0
        Coming24Q2 = 0
        Coming24Q3 = 0
        Coming24Q4 = 0
        Coming25after = 0
        currentFree = 0 ' Initialize currentFree
        
        ' Loop through each sheet in the workbook
        For Each ws In ThisWorkbook.Sheets
            ' Skip the summary sheet
            If ws.Name <> "Component Parts Summary" Then
                ' Check if the sheet name matches the part name
                If ws.Name = partName Then
                    ' Find the last row in the sheet
                    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
                    
                    ' Loop through each transaction in the sheet
                    For j = 101 To lastRow
                        Select Case ws.Cells(j, "C").Value
                            Case "PURCHASE"
                                openPurchase = openPurchase + ws.Cells(j, "H").Value
                                
                                ' Get the transaction date from column B (assuming it's a date)
                                Dim transactionDate As Date
                                
                                ' Try to convert the cell value to a Date
                                On Error Resume Next
                                transactionDate = DateValue(ws.Cells(j, "B").Value)
                                On Error GoTo 0
                                
                                If IsDate(transactionDate) Then
                                    If transactionDate <= DateValue("2023-12-31") Then
                                        ' Before December 31, 2023
                                        Coming23Q4 = Coming23Q4 + ws.Cells(j, "H").Value
                                    ElseIf transactionDate >= DateValue("2024-01-01") And transactionDate <= DateValue("2024-03-31") Then
                                        ' Between January 1, 2024, and March 31, 2024
                                        Coming24Q1 = Coming24Q1 + ws.Cells(j, "H").Value
                                    ElseIf transactionDate >= DateValue("2024-04-01") And transactionDate <= DateValue("2024-06-30") Then
                                        ' Between April 1, 2024, and June 30, 2024
                                        Coming24Q2 = Coming24Q2 + ws.Cells(j, "H").Value
                                    ElseIf transactionDate >= DateValue("2024-07-01") And transactionDate <= DateValue("2024-09-30") Then
                                        ' Between July 1, 2024, and September 30, 2024
                                        Coming24Q3 = Coming24Q3 + ws.Cells(j, "H").Value
                                    ElseIf transactionDate >= DateValue("2024-10-01") And transactionDate <= DateValue("2024-12-31") Then
                                        ' Between October 1, 2024, and December 31, 2024
                                        Coming24Q4 = Coming24Q4 + ws.Cells(j, "H").Value
                                    ElseIf transactionDate >= DateValue("2025-01-01") Then
                                        ' After January 1, 2025
                                        Coming25after = Coming25after + ws.Cells(j, "H").Value
                                    End If
                                End If
                                
                            Case "ORDER"
                                openSales = openSales + ws.Cells(j, "J").Value
                            Case "SHIPMENT", "RECEIVED PURCHASE", "ADJUST FREE" ' Include additional types
                                ' Set currentFree to the latest value
                                currentFree = ws.Cells(j, "I").Value
                        End Select
                    Next j
                    
                    ' Store part data in the collection
                    Dim partInfo As Object
                    Set partInfo = CreateObject("Scripting.Dictionary")
                    partInfo("Name") = partName
                    partInfo("CurrentFree") = currentFree
                    partInfo("OpenSales") = openSales
                    partInfo("OpenPurchase") = openPurchase
                    partInfo("Coming23Q4") = Coming23Q4
                    partInfo("Coming24Q1") = Coming24Q1
                    partInfo("Coming24Q2") = Coming24Q2
                    partInfo("Coming24Q3") = Coming24Q3
                    partInfo("Coming24Q4") = Coming24Q4
                    partInfo("Coming25after") = Coming25after
                    partData.Add partInfo
                    
                    ' Exit the loop since the part data is found
                    Exit For
                End If
            End If
        Next ws
    Next i
    
    ' Loop through each part data and update the summary sheet
    For i = 9 To 290
        partName = summarySheet.Cells(i, "B").Value
        ' Find the corresponding part data in the collection
        For Each partInfo In partData
            If partInfo("Name") = partName Then
                ' Update the summary sheet with the collected data
                summarySheet.Cells(i, "U").Value = partInfo("CurrentFree")
                summarySheet.Cells(i, "V").Value = -partInfo("OpenSales") ' Multiply by -1 to make the value positive
                summarySheet.Cells(i, "W").Value = partInfo("OpenPurchase")
                summarySheet.Cells(i, "X").Value = partInfo("Coming23Q4")
                summarySheet.Cells(i, "Y").Value = partInfo("Coming24Q1")
                summarySheet.Cells(i, "Z").Value = partInfo("Coming24Q2")
                summarySheet.Cells(i, "AA").Value = partInfo("Coming24Q3")
                summarySheet.Cells(i, "AB").Value = partInfo("Coming24Q4")
                summarySheet.Cells(i, "AC").Value = partInfo("Coming25after")
                
                ' Calculate SS index
                If summarySheet.Cells(i, "R").Value <> 0 Then
                    summarySheet.Cells(i, "A").Formula = "=(U" & i & "+W" & i & "-V" & i & ")/((R" & i & "+1)/12)"
                    If summarySheet.Cells(i, "A").Value = 0 Or IsError(summarySheet.Cells(i, "A").Value) Then
                        summarySheet.Cells(i, "A").ClearContents
                    End If
                End If
                
                ' Calculate Inhand Index
                Dim inhandIndex As Double
                inhandIndex = (summarySheet.Cells(i, "E").Value + 7) / (summarySheet.Cells(i, "G").Value + 1)
                summarySheet.Cells(i, "AD").Value = inhandIndex
                
                ' Apply color coding to Inhand Index
                If inhandIndex < 1 Then
                    summarySheet.Cells(i, "AD").Interior.Color = RGB(255, 0, 0) ' ?色
                ElseIf inhandIndex >= 1 And inhandIndex < 8 Then
                    ' define color format
                    Dim redValue As Integer
                    Dim greenValue As Integer
                    
                    ' Inhand Index colar format
                    redValue = 255 * (8 - inhandIndex) / 7
                    greenValue = 255 * (inhandIndex - 1) / 7
                    
                    ' color format
                    summarySheet.Cells(i, "AD").Interior.Color = RGB(redValue, greenValue, 0)
                Else
                    summarySheet.Cells(i, "AD").Interior.Color = RGB(0, 255, 0) ' ?色
                End If
                
                ' delete empty values in G
                If summarySheet.Cells(i, "G").Value < 1 Then
                    summarySheet.Cells(i, "AD").ClearContents
                    summarySheet.Cells(i, "AD").Interior.ColorIndex = xlNone ' 清除?色
                End If
                
                Exit For ' Exit the loop once the part data is found
            End If
        Next partInfo
    Next i
    
    ' Apply color gradient
    With summarySheet.Range("A9:A290").FormatConditions.AddColorScale(ColorScaleType:=3)
        .ColorScaleCriteria(1).Type = xlConditionValueNumber
        .ColorScaleCriteria(1).Value = 5
        With .ColorScaleCriteria(1).FormatColor
            .Color = RGB(255, 0, 0)
            .TintAndShade = 0
        End With
        .ColorScaleCriteria(2).Type = xlConditionValueNumber
        .ColorScaleCriteria(2).Value = 20
        With .ColorScaleCriteria(2).FormatColor
            .Color = RGB(0, 255, 0)
            .TintAndShade = 0
        End With
        .ColorScaleCriteria(3).Type = xlConditionValueHighestValue
        With .ColorScaleCriteria(3).FormatColor
            .Color = RGB(0, 255, 0)
            .TintAndShade = 0
        End With
    End With
End Sub

Sub closefile()
    ' close Fast Component.xlsm
    ActiveWorkbook.Close SaveChanges:=True
End Sub

